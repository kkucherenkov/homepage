<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Kirill&#39;s homepage</title>
        <link>//localhost:1313/posts/</link>
        <description>Recent content in Posts on Kirill&#39;s homepage</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 14 Dec 2023 13:07:15 +0400</lastBuildDate>
        <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Модель OSI</title>
            <link>//localhost:1313/posts/osi_model/</link>
            <pubDate>Thu, 14 Dec 2023 13:07:15 +0400</pubDate>
            
            <guid>//localhost:1313/posts/osi_model/</guid>
            <description>OSI (Open Systems Interconnection) OSI (Open Systems Interconnection) - это модель сетевой архитектуры, которая описывает, как компьютерные системы могут взаимодействовать и обмениваться данными в сетях.
Открытая система - система построенная в соответствии с открытыми спецификациями.
Важно заметить, что OSI не указывает какие протоколы должны быть использованы. Она просто описывает как система будет обрабатывать запросы.
![[_attachments/OSI model/0851a33b558d58e770e7a3e3bf3cb75d_MD5.svg]]OSI
Общее описание уровней в OSI Физический уровень (Physical Layer): Этот уровень отвечает за передачу битов по физической среде передачи, такой как провода, оптоволокно или радиоволны.</description>
            <content type="html"><![CDATA[<h1 id="osi-open-systems-interconnection">OSI (Open Systems Interconnection)</h1>
<p><strong>OSI (Open Systems Interconnection)</strong> - это модель сетевой архитектуры, которая описывает, как компьютерные системы могут взаимодействовать и обмениваться данными в сетях.</p>
<blockquote>
<p>Открытая система - система построенная в соответствии с открытыми спецификациями.</p>
</blockquote>
<p>Важно заметить, что OSI не указывает какие протоколы должны быть использованы. Она просто описывает как система будет обрабатывать запросы.</p>
<p>![[_attachments/OSI model/0851a33b558d58e770e7a3e3bf3cb75d_MD5.svg]]OSI</p>
<h2 id="общее-описание-уровней-в-osi">Общее описание уровней в OSI</h2>
<ol>
<li><strong>Физический уровень (Physical Layer)</strong>: Этот уровень отвечает за передачу битов по физической среде передачи, такой как провода, оптоволокно или радиоволны. На этом уровне определяются характеристики электрических, оптических или радиочастотных сигналов.</li>
<li><strong>Канальный уровень (Data Link Layer)</strong>: Этот уровень обрабатывает физические адреса (MAC-адреса) устройств в сети и осуществляет надежную передачу данных между прямо-соединенными устройствами. Он также обеспечивает обнаружение и исправление ошибок передачи данных.</li>
<li><strong>Сетевой уровень (Network Layer)</strong>: На этом уровне пакеты данных направляются от отправителя к получателю через сеть. Здесь используются IP-адреса, и основная функция состоит в управлении маршрутизацией данных и определении наилучшего пути для доставки пакета.</li>
<li><strong>Транспортный уровень (Transport Layer)</strong>: Этот уровень обеспечивает доставку данных между конечными приложениями на устройствах. Здесь происходит сегментация данных, установление соединений, управление потоком и обеспечение надежной доставки.</li>
<li><strong>Сеансовый уровень (Session Layer)</strong>: Сеансовый уровень отвечает за установление, поддержание и завершение сеанса связи между двумя устройствами. Он управляет диалогом между приложениями, контролирует синхронизацию и обеспечивает восстановление соединения в случае сбоев.</li>
<li><strong>Представительский уровень (Presentation Layer)</strong>: На этом уровне данные преобразуются из сетевого формата в формат, понятный приложениям. Он отвечает за кодирование, сжатие, шифрование и форматирование данных для обеспечения совместимости и безопасности.</li>
<li><strong>Прикладной уровень (Application Layer)</strong>: Этот уровень предоставляет интерфейс для взаимодействия с конечными приложениями. Здесь работают приложения, такие как веб-браузеры, электронная почта, файловые протоколы и другие прикладные программы.</li>
</ol>
<p>Эти семь уровней модели OSI образуют структуру для передачи данных в сети, каждый из которых выполняет свои функции, с тем чтобы обеспечить эффективную, надежную и безопасную коммуникацию.</p>
<h2 id="физический-уровень">Физический уровень</h2>
<p><strong>Физический уровень (Physical Layer)</strong> в модели OSI является самым низким уровнем и отвечает за передачу сырых битов данных по физической среде передачи. Он определяет способы передачи данных через различные физические среды, такие как провода, оптоволокно или радиоволны.</p>
<p>Этот слой занимается обработкой сигналов из проводов, соединениями в разъемах, изменением сигнала и кодированием битов. В основном, это уровень, который отвечает за физическую передачу сигнала. Это наименее абстрактный уровень.</p>
<p>На физическом уровне определяются следующие аспекты:</p>
<ol>
<li><strong>Электрические и оптические характеристики</strong>: Физический уровень определяет электрические и оптические характеристики передаваемого сигнала. Например, для передачи данных по медным проводам используются электрические сигналы, а для передачи данных по оптоволокну используются световые сигналы.</li>
<li><strong>Физические интерфейсы</strong>: Физический уровень определяет физические интерфейсы, которые определяют взаимодействие между сетевыми устройствами и физической средой передачи. Например, сетевая карта на компьютере может иметь Ethernet-порт для подключения к сети посредством Ethernet-кабеля.</li>
<li><strong>Кодирование сигнала</strong>: Физический уровень определяет способы кодирования сигнала для представления данных в виде электрических или оптических импульсов. Кодирование может включать преобразование данных в последовательности битов или использование модуляции для передачи информации.</li>
<li><strong>Синхронизация</strong>: Физический уровень обеспечивает синхронизацию между передатчиком и приемником данных. Это гарантирует, что данные могут быть правильно интерпретированы и получены на другом конце связи.</li>
<li><strong>Физическая топология</strong>: Физический уровень определяет физическую топологию сети, то есть способ, которым устройства связаны друг с другом. Это может быть звездообразная, шина, кольцевая топология и т.д.</li>
<li><strong>Механизмы передачи данных</strong>: Физический уровень также определяет способы передачи данных, такие как параллельная или последовательная передача, полудуплексная или полнодуплексная коммуникация.</li>
</ol>
<blockquote>
<p>Один из популярных протоколов, который используется на данном уровне является Ethernet.</p>
</blockquote>
<p>Физический уровень отвечает за непосредственную передачу битов данных, без учета их смысла или содержания. Он обеспечивает физическую основу для работы всех вышележащих уровней модели OSI и является важным компонентом взаимодействия в сети.</p>
<h2 id="канальный-уровень">Канальный уровень</h2>
<p><strong>Канальный уровень (Data Link Layer)</strong> в модели OSI находится непосредственно над физическим уровнем и предоставляет надежную передачу данных между прямо соединенными устройствами в сети. Он гарантирует, что данные, переданные по физическому уровню, достигают адресата без ошибок.</p>
<p>Канальный уровень выполняет следующие задачи:</p>
<ol>
<li><strong>Формирование кадров (Фрейминг)</strong>: Канальный уровень разделяет поток битов данных, полученных от физического уровня, на кадры. Кадр представляет собой логическую единицу данных, которая включает в себя полезную информацию и управляющие поля, такие как заголовок и проверочную сумму.</li>
<li><strong>Физический доступ к среде (MAC-адресация)</strong>: Канальный уровень использует физические адреса, известные как MAC-адреса (Media Access Control), чтобы идентифицировать устройства в сети. Он обеспечивает уникальность адресов и контролирует доступ к общей среде передачи данных.</li>
<li><strong>Управление ошибками</strong>: Канальный уровень обнаруживает и исправляет ошибки, возникающие в процессе передачи данных по физической среде. Для этого используются различные методы, такие как проверка четности, контрольная сумма или коды исправления ошибок.</li>
<li><strong>Контроль потока</strong>: Канальный уровень контролирует поток передаваемых данных между отправителем и получателем. Он гарантирует, что получатель может принять и обработать данные соответствующим темпом, чтобы избежать потери или переполнения буфера.</li>
<li><strong>Разделение и сборка данных</strong>: Канальный уровень позволяет объединять несколько кадров данных в один пакет для более эффективной передачи по сети. Также он выполняет обратную операцию, разбирая пакеты на отдельные кадры при получении.</li>
<li><strong>Управление доступом к среде передачи данных</strong>: Канальный уровень регулирует доступ к общей среде передачи данных, если сеть использует среду с общим доступом, например, шинную топологию. Это позволяет разным устройствам передавать данные в определенном порядке и с минимальными конфликтами.</li>
</ol>
<blockquote>
<p>К слову, MAC-адрес используется для того чтобы идентифицировать устройство в локальной сети. Сам MAC-адрес &ldquo;зашит&rdquo; в сетевую карту, поменять его можно только с помощью специального софта.</p>
</blockquote>
<p>Канальный уровень играет важную роль в обеспечении надежной и эффективной передачи данных между непосредственно соединенными устройствами в сети. Он служит мостом между физическим и сетевым уровнями, обеспечивая управление ошибками, контроль потока и другие важные функции передачи данных.</p>
<h2 id="сетевой-уровень">Сетевой уровень</h2>
<p><strong>Сетевой уровень (Network Layer)</strong> в модели OSI находится над канальным уровнем и отвечает за управление маршрутизацией данных и определение наилучшего пути для доставки пакетов от отправителя к получателю через сеть.</p>
<p>Сетевой уровень выполняет следующие задачи:</p>
<ol>
<li><strong>Маршрутизация</strong>: Сетевой уровень определяет путь, который должен пройти пакет данных от отправителя к получателю. Он использует различные алгоритмы маршрутизации, такие как протоколы маршрутизации, чтобы принимать решения о выборе оптимального пути на основе различных факторов, включая пропускную способность, задержку, стоимость и загруженность сети.</li>
<li><strong>Фрагментация и сборка пакетов</strong>: Если размер данных превышает максимальный размер пакета, определенный на физическом или канальном уровнях, сетевой уровень разбивает их на более мелкие фрагменты (фрагментация). При получении эти фрагменты собираются обратно в исходные пакеты (сборка).</li>
<li><strong>Управление трафиком</strong>: Сетевой уровень может выполнять функции управления трафиком, например, контролировать скорость передачи данных или устанавливать приоритеты для различных типов трафика.</li>
<li><strong>Логическая адресация</strong>: Для идентификации устройств в сети на сетевом уровне используются логические адреса, такие как IP-адреса. Эти адреса позволяют идентифицировать отправителя и получателя пакета данных.</li>
<li><strong>Фрагментация и сборка пакетов</strong>: Если размер данных превышает максимальный размер пакета, определенный на физическом или канальном уровнях, сетевой уровень разбивает их на более мелкие фрагменты (фрагментация). При получении эти фрагменты собираются обратно в исходные пакеты (сборка).</li>
<li><strong>Управление трафиком</strong>: Сетевой уровень может выполнять функции управления трафиком, например, контролировать скорость передачи данных или устанавливать приоритеты для различных типов трафика.</li>
<li><strong>Логическая адресация</strong>: Для идентификации устройств в сети на сетевом уровне используются логические адреса, такие как IP-адреса. Эти адреса позволяют идентифицировать отправителя и получателя пакета данных.</li>
</ol>
<blockquote>
<p>Как уже можно было понять сетевой уровень отвечает за роутинг пакетов. В отличие от канального уровня - сетевой уровень оперирует пакетами, а не фреймами. В пакетах для получения адресата и адресанта используется IP-адрес, а не MAC-адрес. IP-адрес генерируется исходя из MAC-адреса с помощью протокола <a href="https://ru.wikipedia.org/wiki/ARP">ARP (address resolution protocol)</a>.</p>
</blockquote>
<h2 id="транспортный-уровень">Транспортный уровень</h2>
<p><strong>Транспортный уровень (Transport Layer)</strong> в модели OSI находится над сетевым уровнем и обеспечивает надежную передачу данных между приложениями, работающими на узлах сети. Он предоставляет механизмы для сегментации данных, управления потоком и обеспечения надежности доставки.</p>
<p>Транспортный уровень выполняет следующие задачи:</p>
<ol>
<li><strong>Сегментация и сборка данных</strong>: Транспортный уровень разбивает данные, полученные от приложений, на более мелкие блоки данных, называемые сегментами или пакетами. Это делается для эффективной передачи данных через сеть и управления потоком.</li>
<li><strong>Установление и управление соединениями</strong>: Некоторые протоколы транспортного уровня, такие как TCP (Transmission Control Protocol), обеспечивают установление и управление соединением между отправителем и получателем данных. Это позволяет надежно передавать данные с обратной связью о доставке и контролировать поток данных между узлами.</li>
<li><strong>Контроль надежности</strong>: Транспортный уровень гарантирует надежность доставки данных, обнаруживая и исправляя ошибки, возникающие в процессе передачи. Протоколы, такие как TCP, используют подтверждения и повторную передачу данных для гарантии доставки данных без потерь и в правильном порядке.</li>
<li><strong>Управление потоком</strong>: Транспортный уровень контролирует поток передаваемых данных между отправителем и получателем, чтобы избежать перегрузки получателя или потери данных. Он использует различные механизмы, такие как оконные размеры и подтверждения, чтобы регулировать скорость передачи данных.</li>
<li><strong>Мультиплексирование</strong>: Транспортный уровень позволяет нескольким приложениям использовать одно сетевое соединение одновременно. Он использует порты, чтобы идентифицировать конкретные приложения на узле, и мультиплексирует их данные для передачи через общее соединение.</li>
</ol>
<p>Примерами протоколов транспортного уровня являются TCP и UDP (User Datagram Protocol). TCP обеспечивает надежную доставку данных с установлением соединения и подтверждениями, тогда как UDP предоставляет более простой и безусловный способ передачи данных без обратной связи о доставке.</p>
<h2 id="сеансовый-уровень">Сеансовый уровень</h2>
<p><strong>Сеансовый уровень (Session Layer)</strong> в модели OSI находится над транспортным уровнем и предоставляет механизмы для установления, управления и завершения сеансов связи между приложениями на разных узлах сети. Он обеспечивает логическую связь между приложениями, позволяет управлять потоком данных и обеспечивает восстановление сеансов в случае сбоев.</p>
<p>Сеансовый уровень выполняет следующие задачи:</p>
<ol>
<li><strong>Установление, управление и завершение сеансов</strong>: Сеансовый уровень позволяет приложениям на разных узлах устанавливать, управлять и завершать сеансы связи. Он определяет, когда и как начинать и заканчивать сеансы между приложениями, а также управляет их продолжительностью и последовательностью.</li>
<li><strong>Синхронизация</strong>: Сеансовый уровень обеспечивает синхронизацию данных и действий между приложениями в рамках сеанса связи. Он позволяет приложениям согласовывать свои действия, устанавливать точки синхронизации и обеспечивать согласованность данных.</li>
<li><strong>Управление диалогом</strong>: Сеансовый уровень позволяет приложениям устанавливать и управлять диалогом между собой. Он определяет правила и протоколы для обмена сообщениями и управления потоком данных в рамках диалога.</li>
<li><strong>Управление безопасностью сеанса</strong>: Сеансовый уровень обеспечивает механизмы для аутентификации и защиты сеансов связи. Он может включать функции шифрования, проверки подлинности и управления доступом, чтобы обеспечить безопасность передаваемых данных.</li>
<li><strong>Управление восстановлением сеансов</strong>: В случае сбоев или прерывания связи, сеансовый уровень позволяет восстановить прерванные сеансы и продолжить обмен данными с той же точки, где они были прерваны. Он обеспечивает механизмы для сохранения состояния сеанса и восстановления его при необходимости.</li>
</ol>
<p>Сеансовый уровень облегчает управление коммуникацией между приложениями, предоставляя надежную, синхронизированную и безопасную среду для передачи данных. Однако в современных сетевых протоколах этот уровень не всегда реализуется отдельно, и его функции могут быть встроены в транспортный или прикладной уровни.</p>
<blockquote>
<p>Хорошим примером является звонок в Discord. Покуда мы разговариваем с кем-то, два и более хоста используют одну сессию.</p>
</blockquote>
<h2 id="уровень-представления">Уровень представления</h2>
<p><strong>Уровень представления (Presentation Layer)</strong> в модели OSI находится над сеансовым уровнем и отвечает за представление данных, обеспечивая их совместимость между различными системами. Он выполняет функции преобразования, шифрования, сжатия и форматирования данных, чтобы обеспечить их понимание и интерпретацию приложениями на разных узлах сети.</p>
<p>Представительский уровень выполняет следующие задачи:</p>
<ol>
<li><strong>Кодирование и сжатие данных</strong>: Представительский уровень может выполнять кодирование данных в специальные форматы, чтобы обеспечить их совместимость между различными системами. Он также может применять методы сжатия данных для уменьшения объема передаваемой информации и оптимизации использования сетевых ресурсов.</li>
<li><strong>Шифрование и дешифрование данных</strong>: Представительский уровень может применять методы шифрования для обеспечения конфиденциальности данных во время их передачи. Это позволяет защитить информацию от несанкционированного доступа и обеспечить безопасность коммуникации между системами.</li>
<li><strong>Контроль ошибок и восстановление данных</strong>: Представительский уровень может включать механизмы контроля ошибок, обнаружения и исправления ошибок в данных, а также восстановления поврежденных или потерянных данных. Это позволяет обеспечить надежность передачи данных и минимизировать возможные искажения или потери информации.</li>
<li><strong>Преобразование данных и форматирование</strong>: Представительский уровень может выполнять преобразование данных из одного формата в другой и форматирование данных для их правильного отображения или интерпретации приложениями. Например, он может преобразовывать текстовые данные из одной кодировки в другую или форматировать графические данные для их отображения на конкретном устройстве.</li>
<li><strong>Управление синхронизацией и диалогом</strong>: Представительский уровень может также включать функции управления синхронизацией и диалогом между приложениями. Он определяет правила для согласования передачи данных и контроля потока информации, чтобы обеспечить правильную коммуникацию между приложениями.</li>
</ol>
<p>Представительский уровень обеспечивает стандартизированные методы представления, кодирования и обработки данных, что позволяет различным системам взаимодействовать и обмениваться информацией независимо от их внутренней структуры или формата данных.</p>
<blockquote>
<p>На данном уровне происходит кодировка, преобразование и шифрование. Например, из полученных данных могут получиться MP3, MP4, GIF, JPG файлы.</p>
</blockquote>
<h2 id="прикладной-уровень">Прикладной уровень</h2>
<p><strong>Прикладной уровень (Application Layer)</strong> в модели OSI является верхним уровнем и находится над представительским уровнем. Он предоставляет интерфейс для взаимодействия сетевых приложений и пользователей, позволяя им получать доступ к сетевым службам и ресурсам.</p>
<p>Прикладной уровень выполняет следующие задачи:</p>
<ol>
<li><strong>Предоставление сетевых служб</strong>: Прикладной уровень предоставляет различные сетевые службы и протоколы, такие как электронная почта (SMTP), передача файлов (FTP), доступ к веб-страницам (HTTP), удаленное выполнение команд (SSH), обмен сообщениями (XMPP) и другие. Эти службы позволяют пользователям взаимодействовать с сетевыми ресурсами и выполнять конкретные задачи.</li>
<li><strong>Поддержка приложений</strong>: Прикладной уровень предоставляет программным приложениям необходимые функции и протоколы для работы в сети. Он обеспечивает интерфейсы, библиотеки и API, которые позволяют приложениям отправлять и получать данные через сеть, устанавливать соединения, обрабатывать события и взаимодействовать с другими приложениями.</li>
<li><strong>Протоколы и стандарты</strong>: Прикладной уровень определяет протоколы и стандарты, которые определяют форматы данных, команды, сообщения и правила взаимодействия между приложениями. Это обеспечивает совместимость и взаимодействие между различными сетевыми приложениями, независимо от их разработчиков или платформ.</li>
<li><strong>Управление пользователями и аутентификация</strong>: Прикладной уровень предоставляет средства для управления пользователями, аутентификации и авторизации. Это позволяет определить и проверить личности пользователей, управлять их доступом к ресурсам и обеспечить безопасность коммуникации.</li>
<li><strong>Обработка ошибок и уведомления</strong>: Прикладной уровень может включать механизмы обработки ошибок и отправки уведомлений между приложениями. Он позволяет обнаруживать и сообщать об ошибках, а также передавать уведомления и события от одного приложения к другому.</li>
</ol>
<p>Прикладной уровень является самым близким к конечным пользователям и определяет видимую им функциональность сети. Он позволяет пользователям выполнять конкретные задачи и взаимодействовать с другими узлами в сети.</p>
]]></content>
        </item>
        
        <item>
            <title>В чем фишка NodeJS?</title>
            <link>//localhost:1313/posts/what_is_nodejs/</link>
            <pubDate>Thu, 14 Dec 2023 00:30:35 +0400</pubDate>
            
            <guid>//localhost:1313/posts/what_is_nodejs/</guid>
            <description>Какие проблемы решаем? Мир до Node.js Многопоточный сервер Веб-приложения, написанные следуя клиент/серверной архитектуре, работают по следующей схеме — клиент запрашивает нужный ресурс у сервера и сервер отправляет ресурс в ответ и прерывает соединение.
Такая модель эффективна поскольку каждый запрос к серверу потребляет ресурсы (память, процессорное время и т.д.). Для того чтобы обрабатывать каждый последующий запрос от клиента, сервер должен завершить обработку предыдущего.
Значит ли это, что сервер может обрабатывать только один запрос за раз?</description>
            <content type="html"><![CDATA[<h1 id="какие-проблемы-решаем">Какие проблемы решаем?</h1>
<h2 id="мир-до-nodejs">Мир до Node.js</h2>
<h3 id="многопоточный-сервер">Многопоточный сервер</h3>
<p>Веб-приложения, написанные следуя клиент/серверной архитектуре, работают по следующей схеме — клиент запрашивает нужный ресурс у сервера и сервер отправляет ресурс в ответ и прерывает соединение.</p>
<p>Такая модель эффективна поскольку каждый запрос к серверу потребляет ресурсы (память, процессорное время и т.д.). Для того чтобы обрабатывать каждый последующий запрос от клиента, сервер должен завершить обработку предыдущего.</p>
<p>Значит ли это, что сервер может обрабатывать только один запрос за раз? Не совсем! Когда сервер получает новый запрос он создаёт отдельный <strong>поток</strong> для его обработки.</p>
<p><em>Поток</em>, если простыми словами, это время и ресурсы, которые CPU выделяет на выполнение небольшого блока инструкций. Таким образом, сервер может обрабатывать несколько запросов одновременно, но только по одному на поток. Такая модель так же называться <code>thread-per-request model</code>.</p>
<p>Для обработки N запросов серверу нужно N потоков. Если сервер получает N+1 запросов, тогда он должен ждать пока один из потоков не станет доступным.
Один из способов справиться с этим — добавить больше ресурсов (памяти, ядер процессора и т. д.) на сервер, но это не самое лучшее решение.</p>
<h3 id="блокирующий-вводвывод">Блокирующий ввод/вывод</h3>
<p>Ограниченное число потоков на сервере не единственная проблема. Один поток не может обрабатывать несколько запросов одновременно из-за <code>блокирующих операций ввода/вывода</code>.
Операции ввода-вывода очень медленные, и обычно, поток, обрабатывающий запрос на сервер бездействует ожидая чтения файла с диска, ответа базы данных или какого-то внешнего API.</p>
<h1 id="как-решаем">Как решаем?</h1>
<h2 id="nodejs">Node.js</h2>
<p>Node.js это серверная платформа, что работает на движке Google Chrome — V8, который умеет компилировать JavaScript код в машинный код.</p>
<p>Node.js использует <code>событийно-ориентированную</code> модель и <code>неблокирующую ввод / вывод</code>  архитектуру, что делает его легковесным и эффективным. Это не фреймворк, и не библиотека, это среда выполнения JavaScript.</p>
<h2 id="non-blocking-io">Non-blocking I/O</h2>
<p>Node.js использует неблокирующие ввод/вывод операции и это значит, что:</p>
<ul>
<li>Главный поток не будет блокироваться операциями ввода/вывода.</li>
<li>Сервер будет продолжать обслуживать запросы.</li>
<li>Нам придётся работать с <strong>асинхронным кодом</strong>.
Например, пока файл считывается с диска, Node.js может обрабатывать другие запросы и даже считывать файл снова и всё это в одном потоке.</li>
</ul>
<h1 id="из-чего-состоит-nodejs">Из чего состоит NodeJS?</h1>
<h2 id="event-loop">Event loop</h2>
<p><code>Libuv</code> — C библиотека которая реализует этот паттерн и является частью ядра Node.js. Вы можете узнать больше о libuv <a href="https://nikhilm.github.io/uvbook/introduction.html">здесь</a>.</p>
<p>Цикл событий — это то, что позволяет Node.js выполнять неблокирующие операции ввода-вывода — несмотря на то, что JavaScript является однопоточным, — по возможности перекладывая операции на ядро системы.</p>
<p>Поскольку большинство современных ядер являются многопоточными, они могут обрабатывать несколько операций, выполняемых в фоновом режиме. Когда одна из этих операций завершается, ядро сообщает Node.js, что соответствующий обратный вызов может быть добавлен в очередь опроса для последующего выполнения.</p>
<p>Когда Node.js запускается, он инициализирует цикл событий, обрабатывает предоставленный входной сценарий, который может выполнять асинхронные вызовы API, планировать таймеры или вызывать Process.nextTick(), затем начинает обработку цикла событий.</p>
<pre tabindex="0"><code>     ┌───────────────────┐ 
  ┌─&gt;│ timers            │ 
  │  └────────┬──────────┘
  │  ┌────────┴──────────┐
  │  │ pending callbacks │ 
  │  └────────┬──────────┘ 
  │  ┌────────┴──────────┐ 
  │  │ idle, prepare     │ 
  │  └────────┬──────────┘     ┌───────────────┐ 
  │  ┌────────┴──────────┐     │ incoming:     │ 
  │  │ poll              │&lt;────┤ connections,  │ 
  │  └────────┬──────────┘     │ data, etc.    │ 
  │  ┌────────┴──────────┐     └───────────────┘ 
  │  │ check             │ 
  │  └────────┬──────────┘ 
  │  ┌────────┴──────────┐ 
  └──┤ close callbacks   │
     └───────────────────┘ 
</code></pre><p>Каждый блок будет называться «фазой» цикла событий.</p>
<p>Каждая фаза имеет очередь обратных вызовов FIFO для выполнения. Хотя каждая фаза по-своему особенная, обычно, когда цикл событий входит в данную фазу, он выполняет любые операции, специфичные для этой фазы, а затем выполняет обратные вызовы в очереди этой фазы до тех пор, пока очередь не будет исчерпана или не будет выполнено максимальное количество обратных вызовов. выполнил. Когда очередь исчерпана или достигнут предел обратного вызова, цикл событий перейдет к следующей фазе и так далее.</p>
<p>Поскольку любая из этих операций может планировать дополнительные операции, а новые события, обработанные на этапе опроса, ставятся в очередь ядра, события опроса могут быть поставлены в очередь во время обработки событий опроса. В результате длительные обратные вызовы могут позволить фазе опроса выполняться намного дольше, чем пороговое значение таймера. Более подробную информацию можно найти в разделах таймеров и опросов.</p>
<p>Цикл событий имеет 6 фаз, каждое исполнение всех 6 фаз называют <code>tick</code>-ом.</p>
<ul>
<li><code>timers</code>: в этой фазе выполняются коллбэки, запланированные методами <code>setTimeout()</code> и <code>setInterval()</code>;</li>
<li><code>pending callbacks</code>: выполняются почти все коллбэки, за исключением событий <code>close</code>, таймеров и <code>setImmediate()</code>;</li>
<li><code>idle, prepare</code>: используется только для внутренних целей;</li>
<li><code>poll</code>: ответственен за получение новых событий ввода/вывода. Node.js может блокироваться на этом этапе;</li>
<li><code>check</code>: коллбэки, вызванные методом <code>setImmediate()</code>, выполняються на этом этапе;</li>
<li><code>close callbacks</code>: например, <code>socket.on('close', ...)</code>;</li>
</ul>
<p>Когда циклу событий нужно выполнить операцию ввода/вывода он использует поток ОС с тредпула (thread pool), а когда задача выполнена, коллбэк ставится в очередь во время фазы  <code>pending callbacks</code>.</p>
<p><img src="/posts/what_is_nodejs/_attachments/f360404da91db0d4676808389eb48aa6_MD5.png"></p>
]]></content>
        </item>
        
        <item>
            <title>Настройка NodeJS проекта с TypeScript</title>
            <link>//localhost:1313/posts/setup_typescript_nodejs_app/</link>
            <pubDate>Tue, 12 Dec 2023 17:54:16 +0400</pubDate>
            
            <guid>//localhost:1313/posts/setup_typescript_nodejs_app/</guid>
            <description>В этом гайде мы пройдем через процесс создания TypeScript проекта с нуля. В результате мы настроим холодную перезагрузку и сборочные скрипты для production и development окружений.
Предварительные условия У вас должны быть установлены NodeJS и npm У вас должно быть базовое понимание NodeJS и экосистемы npm У вас должен быть установлен редактор кода, например VS Code Первоначальная установка Давайте создадим директорию в которой будем работать
mkdir typescript-starter cd typescript-starter Далее нам нужно настроить проект, добавить файл package.</description>
            <content type="html"><![CDATA[<p>В этом гайде мы пройдем через процесс создания TypeScript проекта с нуля. В результате мы настроим холодную перезагрузку и сборочные скрипты для <code>production</code> и <code>development</code> окружений.</p>
<h2 id="предварительные-условия">Предварительные условия</h2>
<ul>
<li>У вас должны быть установлены NodeJS и npm</li>
<li>У вас должно быть базовое понимание NodeJS и экосистемы npm</li>
<li>У вас должен быть установлен редактор кода, например VS Code</li>
</ul>
<h2 id="первоначальная-установка">Первоначальная установка</h2>
<p>Давайте создадим директорию в которой будем работать</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir typescript-starter
</span></span><span style="display:flex;"><span>cd typescript-starter
</span></span></code></pre></div><p>Далее нам нужно настроить проект, добавить файл <code>package.json</code> и добавить зависимости</p>
<h3 id="настройка-packagejson">Настройка <code>package.json</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npm init -y
</span></span></code></pre></div><p>Если использовать флаг <code>-y</code> при создании проекта, то мы автоматически согласимся со всеми настройками &ldquo;по умолчанию&rdquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npm install typescript --save-dev
</span></span></code></pre></div><p>Теперь нужно настроить TypeScript</p>
<h3 id="установка-глобальных-типов-typescript-для-nodejs">Установка глобальных типов TypeScript для NodeJS</h3>
<p>В TypeScript есть явные (explicit), неявные (implicit) и глобальные (global) типы.
Неявные типы вычисляются TypeScript на основе начального значения переменной и выглядят так же, как обычный JavaScript.
Явные типы — это когда мы намеренно предоставляем тип, используя специальный синтаксис TypeScript.
Глобальные типы добавляются в общую область исполнения. Поскольку мы используем Node, было бы хорошо, если бы мы могли обеспечить безопасность типов и автодополнение в API Node, например <code>file</code>, <code>path</code>, <code>process</code> и т. д. Для этого мы установим определения типов для NodeJS</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npm install @types/node --save-dev
</span></span></code></pre></div><h3 id="настраиваем-tsconfigjson">Настраиваем  <code>tsconfig.json</code>.</h3>
<p>Файл  <code>tsconfig.json</code> содержит настройки компилятора TypeScript. Создадим этот файл с несколькими заданными опциями:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npx tsc --init --rootDir src --outDir build <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--esModuleInterop --resolveJsonModule --lib es6 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--module commonjs --allowJs true --noImplicitAny true
</span></span></code></pre></div><ul>
<li><code>rootDir</code>: Это путь, по которому TypeScript будет искать наши исходные файлы. Мы задали директорию <code>src/</code>, в ней мы будем писать наш код.</li>
<li><code>outDir</code>: Это путь, по которому TypeScript будет складывать скомпилированный код. Мы указали директорию <code>build/</code>.</li>
<li><code>esModuleInterop</code>: Если вы были в сфере JavaScript в течение последних нескольких лет, вы, возможно, заметили, что системы модулей немного вышли из-под контроля (AMD, SystemJS, ES Modules и т. д.). Если мы используем commonjs в качестве нашей системы модулей (для приложений Node вы должны это делать), тогда нам нужно установить для этого параметра значение true.</li>
<li><code>resolveJsonModule</code>: Если в проекте есть json файлы, эта опция позволит TypeScript ипользовать их.</li>
<li><code>lib</code>: Эта опция добавляет в наш проект глобальные типы, что позволяет нам использовать функции из разных версий Ecmascript, библиотек для тестирования и даже API DOM браузера. Мы хотели бы использовать некоторые возможности языка es6. Все это компилируется в es5.</li>
<li><code>module</code>: <code>commonjs</code> это стандартная система модулей Node в 2019.</li>
<li><code>allowJs</code>: если вы переводите свой старый JavaScript проект в  TypeScript, эта опция позволит вам использовать <code>.js</code> файлы вместе с  <code>.ts</code> файлами.</li>
<li><code>noImplicitAny</code>: запрет неявного указания типа в файлах TypeScript . Каждый тип должен либо иметь определенный тип, либо быть явно объявлен «any». Никаких неявных «any».</li>
</ul>
<p>На данный момент наш файл <code>tsconfig.json</code> выглядит примерно так:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;compilerOptions&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Basic</span> <span style="color:#960050;background-color:#1e0010">Options</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;incremental&#34;: true,                   /* Enable incremental compilation */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">&#34;target&#34;</span>: <span style="color:#e6db74">&#34;es5&#34;</span>,                          <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Specify</span> <span style="color:#960050;background-color:#1e0010">ECMAScript</span> <span style="color:#960050;background-color:#1e0010">target</span> <span style="color:#960050;background-color:#1e0010">version:</span> <span style="color:#960050;background-color:#1e0010">&#39;ES3&#39;</span> <span style="color:#960050;background-color:#1e0010">(default),</span> <span style="color:#960050;background-color:#1e0010">&#39;ES5&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;ES2015&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;ES2016&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;ES2017&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;ES2018&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;ES2019&#39;</span> <span style="color:#960050;background-color:#1e0010">or</span> <span style="color:#960050;background-color:#1e0010">&#39;ESNEXT&#39;.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;module&#34;</span>: <span style="color:#e6db74">&#34;commonjs&#34;</span>,                     <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Specify</span> <span style="color:#960050;background-color:#1e0010">module</span> <span style="color:#960050;background-color:#1e0010">code</span> <span style="color:#960050;background-color:#1e0010">generation:</span> <span style="color:#960050;background-color:#1e0010">&#39;none&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;commonjs&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;amd&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;system&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;umd&#39;,</span> <span style="color:#960050;background-color:#1e0010">&#39;es2015&#39;,</span> <span style="color:#960050;background-color:#1e0010">or</span> <span style="color:#960050;background-color:#1e0010">&#39;ESNext&#39;.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;lib&#34;</span>: [<span style="color:#e6db74">&#34;es6&#34;</span>],                     <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Specify</span> <span style="color:#960050;background-color:#1e0010">library</span> <span style="color:#960050;background-color:#1e0010">files</span> <span style="color:#960050;background-color:#1e0010">to</span> <span style="color:#960050;background-color:#1e0010">be</span> <span style="color:#960050;background-color:#1e0010">included</span> <span style="color:#960050;background-color:#1e0010">in</span> <span style="color:#960050;background-color:#1e0010">the</span> <span style="color:#960050;background-color:#1e0010">compilation.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;allowJs&#34;</span>: <span style="color:#66d9ef">true</span>,                          <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Allow</span> <span style="color:#960050;background-color:#1e0010">javascript</span> <span style="color:#960050;background-color:#1e0010">files</span> <span style="color:#960050;background-color:#1e0010">to</span> <span style="color:#960050;background-color:#1e0010">be</span> <span style="color:#960050;background-color:#1e0010">compiled.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;checkJs&#34;: true,                       /* Report errors in .js files. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;jsx&#34;: &#34;preserve&#34;,                     /* Specify JSX code generation: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;declaration&#34;: true,                   /* Generates corresponding &#39;.d.ts&#39; file. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;declarationMap&#34;: true,                /* Generates a sourcemap for each corresponding &#39;.d.ts&#39; file. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;sourceMap&#34;: true,                     /* Generates corresponding &#39;.map&#39; file. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;outFile&#34;: &#34;./&#34;,                       /* Concatenate and emit output to single file. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">&#34;outDir&#34;</span>: <span style="color:#e6db74">&#34;build&#34;</span>,                          <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Redirect</span> <span style="color:#960050;background-color:#1e0010">output</span> <span style="color:#960050;background-color:#1e0010">structure</span> <span style="color:#960050;background-color:#1e0010">to</span> <span style="color:#960050;background-color:#1e0010">the</span> <span style="color:#960050;background-color:#1e0010">directory.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;rootDir&#34;</span>: <span style="color:#e6db74">&#34;src&#34;</span>,                         <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Specify</span> <span style="color:#960050;background-color:#1e0010">the</span> <span style="color:#960050;background-color:#1e0010">root</span> <span style="color:#960050;background-color:#1e0010">directory</span> <span style="color:#960050;background-color:#1e0010">of</span> <span style="color:#960050;background-color:#1e0010">input</span> <span style="color:#960050;background-color:#1e0010">files.</span> <span style="color:#960050;background-color:#1e0010">Use</span> <span style="color:#960050;background-color:#1e0010">to</span> <span style="color:#960050;background-color:#1e0010">control</span> <span style="color:#960050;background-color:#1e0010">the</span> <span style="color:#960050;background-color:#1e0010">output</span> <span style="color:#960050;background-color:#1e0010">directory</span> <span style="color:#960050;background-color:#1e0010">structure</span> <span style="color:#960050;background-color:#1e0010">with</span> <span style="color:#960050;background-color:#1e0010">--outDir.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;composite&#34;: true,                     /* Enable project compilation */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;tsBuildInfoFile&#34;: &#34;./&#34;,               /* Specify file to store incremental compilation information */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;removeComments&#34;: true,                /* Do not emit comments to output. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;noEmit&#34;: true,                        /* Do not emit outputs. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;importHelpers&#34;: true,                 /* Import emit helpers from &#39;tslib&#39;. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;downlevelIteration&#34;: true,            /* Provide full support for iterables in &#39;for-of&#39;, spread, and destructuring when targeting &#39;ES5&#39; or &#39;ES3&#39;. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;isolatedModules&#34;: true,               /* Transpile each file as a separate module (similar to &#39;ts.transpileModule&#39;). */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Strict</span> <span style="color:#960050;background-color:#1e0010">Type-Checking</span> <span style="color:#960050;background-color:#1e0010">Options</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;strict&#34;</span>: <span style="color:#66d9ef">true</span>,                           <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Enable</span> <span style="color:#960050;background-color:#1e0010">all</span> <span style="color:#960050;background-color:#1e0010">strict</span> <span style="color:#960050;background-color:#1e0010">type-checking</span> <span style="color:#960050;background-color:#1e0010">options.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;noImplicitAny&#34;</span>: <span style="color:#66d9ef">true</span>,                    <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Raise</span> <span style="color:#960050;background-color:#1e0010">error</span> <span style="color:#960050;background-color:#1e0010">on</span> <span style="color:#960050;background-color:#1e0010">expressions</span> <span style="color:#960050;background-color:#1e0010">and</span> <span style="color:#960050;background-color:#1e0010">declarations</span> <span style="color:#960050;background-color:#1e0010">with</span> <span style="color:#960050;background-color:#1e0010">an</span> <span style="color:#960050;background-color:#1e0010">implied</span> <span style="color:#960050;background-color:#1e0010">&#39;any&#39;</span> <span style="color:#960050;background-color:#1e0010">type.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;strictNullChecks&#34;: true,              /* Enable strict null checks. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;strictFunctionTypes&#34;: true,           /* Enable strict checking of function types. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;strictBindCallApply&#34;: true,           /* Enable strict &#39;bind&#39;, &#39;call&#39;, and &#39;apply&#39; methods on functions. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;strictPropertyInitialization&#34;: true,  /* Enable strict checking of property initialization in classes. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;noImplicitThis&#34;: true,                /* Raise error on &#39;this&#39; expressions with an implied &#39;any&#39; type. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;alwaysStrict&#34;: true,                  /* Parse in strict mode and emit &#34;use strict&#34; for each source file. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Additional</span> <span style="color:#960050;background-color:#1e0010">Checks</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;noUnusedLocals&#34;: true,                /* Report errors on unused locals. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;noUnusedParameters&#34;: true,            /* Report errors on unused parameters. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;noImplicitReturns&#34;: true,             /* Report error when not all code paths in function return a value. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;noFallthroughCasesInSwitch&#34;: true,    /* Report errors for fallthrough cases in switch statement. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Module</span> <span style="color:#960050;background-color:#1e0010">Resolution</span> <span style="color:#960050;background-color:#1e0010">Options</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;moduleResolution&#34;: &#34;node&#34;,            /* Specify module resolution strategy: &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6). */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;baseUrl&#34;: &#34;./&#34;,                       /* Base directory to resolve non-absolute module names. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;paths&#34;: {},                           /* A series of entries which re-map imports to lookup locations relative to the &#39;baseUrl&#39;. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;rootDirs&#34;: [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;typeRoots&#34;: [],                       /* List of folders to include type definitions from. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;types&#34;: [],                           /* Type declaration files to be included in compilation. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;allowSyntheticDefaultImports&#34;: true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">&#34;esModuleInterop&#34;</span>: <span style="color:#66d9ef">true</span>,                  <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Enables</span> <span style="color:#960050;background-color:#1e0010">emit</span> <span style="color:#960050;background-color:#1e0010">interoperability</span> <span style="color:#960050;background-color:#1e0010">between</span> <span style="color:#960050;background-color:#1e0010">CommonJS</span> <span style="color:#960050;background-color:#1e0010">and</span> <span style="color:#960050;background-color:#1e0010">ES</span> <span style="color:#960050;background-color:#1e0010">Modules</span> <span style="color:#960050;background-color:#1e0010">via</span> <span style="color:#960050;background-color:#1e0010">creation</span> <span style="color:#960050;background-color:#1e0010">of</span> <span style="color:#960050;background-color:#1e0010">namespace</span> <span style="color:#960050;background-color:#1e0010">objects</span> <span style="color:#960050;background-color:#1e0010">for</span> <span style="color:#960050;background-color:#1e0010">all</span> <span style="color:#960050;background-color:#1e0010">imports.</span> <span style="color:#960050;background-color:#1e0010">Implies</span> <span style="color:#960050;background-color:#1e0010">&#39;allowSyntheticDefaultImports&#39;.</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;preserveSymlinks&#34;: true,              /* Do not resolve the real path of symlinks. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;allowUmdGlobalAccess&#34;: true,          /* Allow accessing UMD globals from modules. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Source</span> <span style="color:#960050;background-color:#1e0010">Map</span> <span style="color:#960050;background-color:#1e0010">Options</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;sourceRoot&#34;: &#34;&#34;,                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;mapRoot&#34;: &#34;&#34;,                         /* Specify the location where debugger should locate map files instead of generated locations. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;inlineSourceMap&#34;: true,               /* Emit a single file with source maps instead of having a separate file. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;inlineSources&#34;: true,                 /* Emit the source alongside the sourcemaps within a single file; requires &#39;--inlineSourceMap&#39; or &#39;--sourceMap&#39; to be set. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Experimental</span> <span style="color:#960050;background-color:#1e0010">Options</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// &#34;experimentalDecorators&#34;: true,        /* Enables experimental support for ES7 decorators. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// &#34;emitDecoratorMetadata&#34;: true,         /* Enables experimental support for emitting type metadata for decorators. */
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Advanced</span> <span style="color:#960050;background-color:#1e0010">Options</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;resolveJsonModule&#34;</span>: <span style="color:#66d9ef">true</span>                 <span style="color:#960050;background-color:#1e0010">/*</span> <span style="color:#960050;background-color:#1e0010">Include</span> <span style="color:#960050;background-color:#1e0010">modules</span> <span style="color:#960050;background-color:#1e0010">imported</span> <span style="color:#960050;background-color:#1e0010">with</span> <span style="color:#960050;background-color:#1e0010">&#39;.json&#39;</span> <span style="color:#960050;background-color:#1e0010">extension</span> <span style="color:#960050;background-color:#1e0010">*/</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Можно пойти дальше и почистить его от ненужных и закоментированных строк:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;compilerOptions&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;target&#34;</span>: <span style="color:#e6db74">&#34;es5&#34;</span>,                          
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;module&#34;</span>: <span style="color:#e6db74">&#34;commonjs&#34;</span>,                    
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;lib&#34;</span>: [<span style="color:#e6db74">&#34;es6&#34;</span>],                     
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;allowJs&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;outDir&#34;</span>: <span style="color:#e6db74">&#34;build&#34;</span>,                          
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;rootDir&#34;</span>: <span style="color:#e6db74">&#34;src&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;strict&#34;</span>: <span style="color:#66d9ef">true</span>,         
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;noImplicitAny&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;esModuleInterop&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;resolveJsonModule&#34;</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Мы готовы написать и запустить наш первый TypeScript файл</p>
<h3 id="создание-src-и-первой-программы-на-typescript">Создание <code>src</code> и первой программы на TypeScript</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir src
</span></span><span style="display:flex;"><span>touch src/index.ts
</span></span></code></pre></div><p>Теперь добавим немного кода:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-typescript" data-lang="typescript"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Hello world!&#39;</span>)
</span></span></code></pre></div><h3 id="компиляция-нашего-typescript">Компиляция нашего TypeScript</h3>
<p>Чтобы скомпилировать наш код, нам нужно запустить команду <code>tsc</code> с помощью <code>npx</code>, исполнителя пакетов Node. <code>tsc</code> прочитает <code>tsconfig.json</code> в текущем каталоге и применит конфигурацию к компилятору TypeScript для создания скомпилированного кода JavaScript.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npx tsc
</span></span></code></pre></div><p>Проверим, что получилось после компиляции в файле  <code>build/index.js</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#e6db74">&#34;use strict&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Hello world!&#39;</span>);
</span></span></code></pre></div><h2 id="полезные-настройки-и-скрипты">Полезные настройки и скрипты</h2>
<h3 id="холодная-перезагрузка">Холодная перезагрузка</h3>
<p>Холодная перезагрузка полезна при локальной разработке. Для её настройки нам понадобится еще пара пакетов: <code>ts-node</code> для запуска кода TypeScript напрямую, не дожидаясь его компиляции, и <code>nodemon</code> для отслеживания изменений в нашем коде и автоматического перезапуска при изменении файла.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npm install --save-dev ts-node nodemon
</span></span></code></pre></div><p>Добавим конфигурационный файл для nodemon: <code>nodemon.json</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;watch&#34;</span>: [<span style="color:#e6db74">&#34;src&#34;</span>],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;ext&#34;</span>: <span style="color:#e6db74">&#34;.ts,.js&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;ignore&#34;</span>: [],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;exec&#34;</span>: <span style="color:#e6db74">&#34;npx ts-node ./src/index.ts&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Для того, чтобы воспользоваться преимуществами nodemon добавим его вызов при запуске нашего приложения в <code>package.json</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;start:dev&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;npx nodemon&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span></code></pre></div><p>Теперь, при запуске команды <code>npm run start:dev</code>, <code>npx nodemon</code> запустит наше приложение с помощью <code>npx ts-node ./src/index.ts</code> и будет следить за изменениями  в файлах <code>.ts</code> и <code>.js</code> в директории <code>/src</code>.</p>
<h3 id="создание-релизных-сборок">Создание релизных сборок</h3>
<p>Для того, чтобы сделать чистую компиляцию проекта для релиза мы можем добавить скрипт <code>build</code></p>
<p>Установим пакет <code>rimraf</code>, независящую от платформы команду, действующую как  <code>rm -rf</code> (просто удаляет то, что вы её скажете)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>npm install --save-dev rimraf
</span></span></code></pre></div><p>И после этого добавьте в файл <code>package.json</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;build&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;rimraf ./build &amp;&amp; tsc&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</span></span></code></pre></div><p>Теперь, когда мы выполним <code>npm run build</code>, <code>rimraf</code> очистит нашу старую директорию <code>build</code> до того, как компилятор TypeScript создаст новый код в <code>build</code>.</p>
<h3 id="запуск-релизной-сборки">Запуск релизной сборки</h3>
<p>Для того, чтобы запустить релизную сборку нам нужно сначала выполнить команду <code>build</code> а затем запустить скомпилированный файл <code>build/index.js</code>.</p>
<p>Скрипт запуска выглядит так (<code>package.json</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;start&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;npm run build &amp;&amp; node build/index.js&#34;</span>
</span></span></code></pre></div><hr>
<h2 id="обзор-скриптов">Обзор скриптов</h2>
<h3 id="npm-run-startdev"><code>npm run start:dev</code></h3>
<p>Запускает приложение в режиме разработки с помощью <code>nodemon</code> и  <code>ts-node</code>, поддерживает перезапуск при изменении файлов.</p>
<h3 id="npm-run-build"><code>npm run build</code></h3>
<p>Собирает приложение в  <code>build</code>, предварительно очищая директорию сборки.</p>
<h3 id="npm-run-start"><code>npm run start</code></h3>
<p>Запускает приложение в релизном режиме.</p>
]]></content>
        </item>
        
    </channel>
</rss>
